Java反射 

              
         Java中的反射机制（动态机制）：它是Java中非常重要的特性
         反射的特点：
            1.在程序运行时可以判断任意一个对象所属的类是哪一个
            2.也可以在运行的时候获取到类的对象
            3.可以获取到类所属的成员变量以及方法
        
         反射几种常用写法
            1.Class.forName(String name);    返回与带有给定字符串名的类或接口相关联的 Class 对象。  name 为当前类具体的包位置
                  Class<?> forName = Class.forName("com.foreknow.reflection.ReflectionDemo");   //获取类对象
                  forName.getMethod(方法名，方法参数列表(Class类型));      //执行类对象方法
            
            2. 类名.class   或  接口名.class    返回指定类的具体的包的位置   返回值：com.foreknow.reflection.ReflectionDemo
            
            3. new 类名().getClass()    返回对象的类
        
        
        
         方法：
            aClass为执行反射后获取到的对象
            
            aClass.getName() 获取方法名字
            aClass.getSuperclass() 获取父类的名字
            getClass()：取得当前对象所属的Class对象   
            getClass().getClassLoader()：取得该Class对象的类装载器
            getClass().getInterfaces()  获取目标对象实现的接口的类型


        例子：
            String name = "123";
            Class<? extends String> aClass = name.getClass();       获取对象本身所处类型  返回值：java.lang.String
                      
            
            Button button = new Button();       对实例化的对象进行反射操作
            System.out.println(ReflectionDemo.class.getName());        返回值：com.foreknow.reflection.ReflectionDemo  实例化对象所在包
            

          反射调用方法：

           public String testMethod(String str, Hashtable hashtable){

                String returnStr = "这是我们要反悔的数据";
                System.out.println(hashtable.get("name"));

                return null;

            }

            

          //        获取到类对象
                  Class<?> forName = Class.forName("com.foreknow.reflection.ReflectionDemo");
          //        方法参数列表 设置参数形参类型
                  Class [] t1 = new Class[2];
                  t1[0] = Class.forName("java.lang.String");
                  t1[1] = Class.forName("java.util.Hashtable");

          //        获取到当前对象中的方法名 testMethod，并且设置方法参数类型(形参)
                  Method testMethod = forName.getMethod("testMethod", t1);     //方法名    参数类型

          //        可以通过invoke 调用方法  invoke(对象名，参数(数组 Object 类型))
                  Object[] args = new Object[2];
                  args[0]="第一个值";
                  Hashtable<String, Integer> Hashtable = new Hashtable<>();
                  Hashtable.put("name",13);
                  args[1]=Hashtable;

          //        由指定方法调用对象并传参
                  String str = (String) testMethod.invoke(new ReflectionDemo(),args);   //实例化类   传入参数
                                           或 
                  String str = (String) testMethod.invoke(forName.newInstance(),args);   //实例化 不过次类必须有无参构造才可以不然会报错 （Java 9后弃用）
                                           或
                  String str = (String) testMethod.invoke(forName..getDeclaredConstructor().newInstance(),args);   //实例化 不过次类必须有无参构造才可以不然会报错                      
                  System.out.println(str);




            public class Testinvoke {


                public static void main(String[] args) throws Exception {
                    Pig pig = new Pig();
                    //获取包的位置
                    System.out.println(pig.getClass());
                    //包的位置
                    Class clazz =Class.forName("com.lwy.invoke.Pig");
                    //要执行的方法和参数类型
                    Method eat = clazz.getMethod("eat", Class.forName("java.lang.String"));
                    //实例化对象 参数
                    String invoke = (String) eat.invoke(pig, "卢本伟");
                    System.out.println(invoke);
                }
            }

            class Pig{
                public String eat(String name){
                    System.out.println(name+"正在吃");

                    return name;
                }
            }





-----------------------------------------------------------------------------------------------------------------------------------------------------------




          Java中newInstance()和new()


        在Java开发特别是数据库开发中，经常会用到Class.forName( )这个方法。通过查询Java Documentation我们会发现使用Class.forName( )静态方法的目的是为了动态加载类。在加载完成后，一般还要调用Class下的newInstance( )静态方法来实例化对象以便操作。因此，单单使用Class.forName( )是动态加载类是没有用的，其最终目的是为了实例化对象。

        这里有必要提一下就是Class下的newInstance()和new有什么区别？，首先，newInstance( )是一个方法，而new是一个关键字，其次，Class下的newInstance()的使用有局限，因为它生成对象只能调用无参的构造函数，而使用new关键字生成对象没有这个限制。
        好，到此为止，我们总结如下：

            Class.forName("")返回的是类
            Class.forName("").newInstance()返回的是object

        有数据库开发经验朋友会发现，为什么在我们加载数据库驱动包的时候有的却没有调用newInstance( )方法呢？即有的jdbc连接数据库的写法里是
        Class.forName(xxx.xx.xx);而有一些：Class.forName(xxx.xx.xx).newInstance()，为什么会有这两种写法呢？
        刚才提到，Class.forName("");的作用是要求JVM查找并加载指定的类，如果在类中有静态初始化器的话，JVM必然会执行该类的静态代码段。而在JDBC规范中明确要求这个Driver类必须向DriverManager注册自己，即任何一个JDBC Driver的Driver类的代码都必须类似如下：

            public class MyJDBCDriver implements Driver {  
                static {  
                    DriverManager.registerDriver(new MyJDBCDriver());  
                }  
            }  

        既然在静态初始化器的中已经进行了注册，所以我们在使用JDBC时只需要Class.forName(XXX.XXX);就可以了。
        Java中工厂模式经常使用newInstance()方法来创建对象，因此从为什么要使用工厂模式上可以找到具体答案。 例如：

            class c = Class.forName("Example");
            factory = (ExampleInterface)c.newInstance();

            其中ExampleInterface是Example的接口，可以写成如下形式：

                String className = "Example";
                class c = Class.forName(className);
                factory = (ExampleInterface)c.newInstance();

            进一步可以写成如下形式：

                String className = readfromXMlConfig;//从xml 配置文件中获得字符串
                class c = Class.forName(className);
                factory = (ExampleInterface)c.newInstance();

        上面代码已经不存在Example的类名称，它的优点是，无论Example类怎么变化，上述代码不变，甚至可以更换Example的兄弟类Example2 , Example3 , Example4……，只要他们继承ExampleInterface就可以。

        从JVM的角度看，我们使用关键字new创建一个类的时候，这个类可以没有被加载。但是使用newInstance()方法的时候，就必须保证：1、这个 类已经加载；2、这个类已经连接了。而完成上面两个步骤的正是Class的静态方法forName()所完成的，这个静态方法调用了启动类加载器，即加载 java API的那个加载器。

        现在可以看出，newInstance()实际上是把new这个方式分解为两步，即首先调用Class加载方法加载某个类，然后实例化。 这样分步的好处是显而易见的。我们可以在调用class的静态加载方法forName时获得更好的灵活性，提供给了一种降耦的手段。

        最后用最简单的描述来区分new关键字和newInstance()方法的区别：

            newInstance: 弱类型。低效率。只能调用无参构造。
            new: 强类型。相对高效。能调用任何public构造。
