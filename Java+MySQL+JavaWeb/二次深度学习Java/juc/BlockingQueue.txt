

BlockingQueue  FIFO   interface

    在多线程领域：所谓阻塞，就是在某些情况下会挂起线程 (即阻塞),一旦条件满足，被挂起的线程又会被唤醒。

    为什么需要BlockingQueue:我们不需要关心什么时候阻塞线程，什么时候唤醒线程，这一切BlockingQueue都给你办了



    e.g.:
        海底捞等位，等出来一个才能放人，没人出来就一直等着，就是FIFO


    实现类：前两个常用
            ArrayBlockingQueue：    数组结构有界阻塞队列   *
            LinkedBlockingQueue:    链表结构有界(默认大小为integer.MAX_VALUE)阻塞队列   *
            PriorrityBlockingQueue: 支持优先级排序的无界阻塞队列
            DelayQueue:             使用优先级队列实现的延迟无阻界队列。
            SynchrounousQueue:      不存储元素的阻塞队列，即单个阻塞队列  *
            LinkedTransferQueue     由链表组成的无界阻塞队列
            LinkedBlockingDeque     由链表组成双向有序队列


    用法：
 
        方法类型        返回异常     返回特殊值         阻塞       阻塞超时***
        插入             add(e)       offer(e)        put(e)        offer(e,time,util)
        移除            remove()      poll()          take()       poll(time,util)
        检查            element()     peek()          无            无

    抛出异常：
            当阻塞队列满时，再使用add()添加就会返回IllegalStateException:Queue full
            当阻塞队列空的时候，再使用remove()删除元素会返回NoSuchElementException
    特殊值：
            插入 true false
            删除  成功返回元素值，失败返回null
    阻塞：
            阻塞队列满的时候再往里添加值，队列会一直阻塞直到成功添加值或者中断
            阻塞队列空的时候再删除值，队列会一直阻塞直到成功删除值或者中断
    阻塞超时：
            阻塞一段时间后退出

        阻塞队列底层使用 ReentrantLock 实现同步 以及LockSupport





