1.背景：
    countDownLatch是在java1.5被引入，跟它一起被引入的工具类还有CyclicBarrier、Semaphore、concurrentHashMap和BlockingQueue。
    存在于java.util.cucurrent包下。
2.概念
     countDownLatch这个类使一个线程等待其他线程各自执行完毕后再执行。
     是通过一个计数器来实现的，计数器的初始值是线程的数量。每当一个线程执行完毕后，计数器的值就-1，当计数器的值为0时，表示所有线程都执行
     完毕，然后在闭锁上等待的线程就可以恢复工作了。

     Java的concurrent包里面的CountDownLatch其实可以把它看作一个计数器，只不过这个计数器的操作是原子操作，同时只能有一个线程去操作这个
     计数器，
     也就是同时只能有一个线程去减这个计数器里面的值。

      你可以向CountDownLatch对象设置一个初始的数字作为计数值，任何调用这个对象上的await()方法都会阻塞，直到这个计数器的计数值被其他的
      线止。CountDownLatch的一个非常典型的应用场景是：有一个任务想要往下执行，但必须要等到其他的任务执行完毕后才可以继续往下执行。假如
      我们这个想要继续往下执行的任务调用一个CountDownLatch对象的await()方法，其他的任务执行完自己的任务后调用同一个CountDownLatch对象
      上的countDown()方法，这个调用await()方法的任务将一直阻塞等待，直到这个CountDownLatch对象的计数值减到0为止。




countDownLatch类中只提供了一个构造器：

    //参数count为计数值
    public CountDownLatch(int count) {  };  


类中有三个方法是最重要的：(计数到0才能执行线程)

    void await()                                     使当前线程等待直到锁向下计数为零，除非线程 interrupted。  
    boolean await(long timeout, TimeUnit unit)       使当前线程等待直到锁向下计数为零，除非线程 interrupted，或指定的等待时间的流逝。  
    void countDown()                                 减少锁的数量，释放所有等待的线程，如果计数为零。  
    long getCount()                                  返回当前计数。  
    String toString()                                返回一个识别该锁存器的字符串，以及它的状态。  
















































































































































































