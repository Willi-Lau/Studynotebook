ReentrantLock主要利用CAS+AQS队列来实现。它支持公平锁和非公平锁，两者的实现类似

CAS：Compare and Swap，比较并交换。CAS有3个操作数：内存值V、预期值A、要修改的新值B。
    当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。该操作是一个原
    子操作，被广泛的应用在Java的底层实现中。在Java中，CAS主要是由sun.misc.Unsafe这
    个类通过JNI调用CPU底层指令实现


AbstractQueuedSynchronizer简称AQS:
    是一个用于构建锁和同步容器的框架。事实上concurrent包内许多类都是基于AQS构建，例如
    ReentrantLock，Semaphore，CountDownLatch，ReentrantReadWriteLock，FutureTask等
    。AQS解决了在实现同步容器时设计的大量细节问题。


ReentrantLock的基本实现可以概括为：先通过CAS尝试获取锁。如果此时已经有线程占据了锁，那就加入AQS队列并且被挂起。当锁被释放之后，排在CLH队列队首的线程会被唤醒，然后CAS再次尝试获取锁。在这个时候，如果：

    非公平锁：如果同时还有另一个线程进来尝试获取，那么有可能会让这个线程抢先获取；

    公平锁：如果同时还有另一个线程进来尝试获取，当它发现自己不是在队首的话，就会排到队尾，由队首的线程获取到锁。


Lock是java.util.concurrent.Locks 包下的一个接口，必须要手动释放。特别是在发生异常时，需要在 finally 
        块中进行手动释放，否则会发生死锁行为

        我们可以在创建ReentrantLock对象时，通过以下方式来设置锁的公平性：

        ReentrantLock lock = new ReentrantLock(true);

        Lock lock = new ReentrantLock();    //新建锁
        lock.lock();     //开启锁
            try{
                要执行的方法体
            }catch (Exception e){
                e.printStackTrace();
            }
            finally {
                lock.unlock();   //关闭锁
            }

