优点：线程复用，控制最大并发数，管理线程  类似Spring控制对象池 可以提供最大得性能复用线程


          线程池7大参数  底层源码
          public ThreadPoolExecutor(int corePoolSize,    //线程池中常驻核心线程数
                  int maximumPoolSize,           //线程池最大线程数，此值必须大于1  一般是Cpu核数+1
                  long keepAliveTime,            //多余线程存活时间，线程池中线程超过corePoolSize ,存活时间超过 keepAliveTime ，多余线程会呗销毁
                  TimeUnit unit,               //keepAliveTime 的单位
                  BlockingQueue<Runnable> workQueue,    //任务队列，被提交没有被执行的队列
                  ThreadFactory threadFactory,           //线程池中的工作工厂，用于创建线程，可以缺省吗，即默认   就是品牌
                  RejectedExecutionHandler handler)   //拒绝策略 表示队列满了，并且工作线程大于等待线程的最大 线程数时如何拒绝请求执行的Runnable策略 可以缺省
        

ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor(4, 5, 1L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());


        for (int i=0;i<30;i++)
            //线程池使用 传入 Runnable
        poolExecutor.execute(()->{
            System.out.println("hahah         "+ Thread.currentThread().getName());
        });


        //线程池停止
        poolExecutor.shutdown();



    线程池扩容机制

        首先线程进来会到常驻线程中 corePoolSize 如果常驻线程满了，那就把再新增的线程送到阻塞队列 BlockingQueue 如果祖泽队列也满了，
        就开启备用线程，慢慢增加到线程池最大线程数 maxinumPoolSize 如果最大线程也满了，那么就开始劝退，拒绝策略开始起作用
    
    线程池的选择：

        根据阿里巴巴Java开发手册，Exectors创建的线程池都不能用，想用就自己手动创建（自定义的）：
            ExecutorService pool = Executors.newFixedThreadPool(10);   //一池固定数线程 自己设置
            ExecutorService pool2 = Executors.newSingleThreadExecutor();        //一池一个线程
            ExecutorService pool1 = Executors.newCachedThreadPool();        //一池N线程 根据需求动态变化

            Exectors返回的线程池的弊端：
            1：FixedThreadPool和SingleThradPool
                允许的队列请求长度为Integer.MAX_VALUE 可能会堆积大量的请求，导致OOM
            2：CacheThreadPol 和ScheduledThreadPool:
                允许创建的线程数量为Integer.MAX_VALUE ,可能会创建大量的线程，导致OOM
        

        线程池最大承载量即 最大存活数(maximumPoolSize) + 阻塞队列容量(workQueue) 不指定容量默认值未Integer.MAX_VALUE ，如果超过这两个数
        的和之外还有需要执行的任务，那么线程池就会执行拒绝策略。

    四种拒绝策略：

        AbortPolicy(默认)：丢弃任务,直接抛出RejectedExecutionException异常阻止系统正常运行。
        CallerRunsPolicy: “调用者运行”一种调节机制，该策略既不会抛弃任务，也不会抛出异常，而是将某些任务回退到调用者，从而降低任务量 (回退)
        DiscardOldestPolicy:丢弃队列最前面的任务,抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务
        DiscardPolicy:丢弃任务,该策略默默的丢弃无法处理的任务，没有任何处理也不抛出异常。如果允许任务丢失，这是最好的策略 

    线程池生命周期：

     https://developer.aliyun.com/article/511237

    线程池的生命周期，即线程池从创建、使用到最终销毁所经历的过程。ThreadPoolExecutor将线程池的生命周期划分为5个状态
    ，分别是：running、shutdown、stop、tidying、terminated。


    running：线程池创建后的状态，能够接收新任务，同时处理任务队列中的任务；
    shutdown：执行shutdown()后，不接收新任务，但是会处理任务队列中的任务；
    stop：执行shutdownNow()后，不接收新任务，也不处理任务队列中的任务，同时会中断正在执行的任务；
    tidying：当所有任务都已被终止，工作线程数为0后，状态变为tidying状态，然后运行terminated()钩子方法；
    terminated：当terminated()钩子方法执行完毕后，变为此状态。此时ThreadPoolExecutor已被完全终止；
    
线程池生命周期
    创建之初，状态为RUNNNG
    调用了ExecutorService#shutdown：将之前已经提交上来的任务进行处理（包括队列中的），但是不再接收新任务（使用回绝策略回绝新任务），状态SHUNTDOWN
    调用了ExecutorService#shutdownNow：取消所有运行中的任务（包括队列中的），并且不再接收新任务（使用回绝策略回绝新任务），状态STOP/TERMINATED