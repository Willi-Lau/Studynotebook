StackOverFlowError  OutOfMemoeyError


java.lang.StackOverFlowError:

    //死循环 

    public class StackOverFlowErrorDemo {
    public static void main(String[] args) {
        StackOverflowError();   //模拟出 StackOverFlowError
    

    }

    public static void StackOverflowError() {
        StackOverflowError();
    }
    }

   
java.lang.OutOfMemoryError: Java heap space

        //对象太多，太大
        byte[] bytes = new byte[100 * 1024 * 1024];
         //or
        String s = "str";
        while (true){
            s += UUID.randomUUID().toString().substring(1);
            s.intern();
            System.out.println(s);
        }


java.lang.OutOfMemoryError: GC overhead limit exceeded （GC失败）

        int i = 0;
        List list = new ArrayList();
        try {
            while(true){
                list.add(String.valueOf(i++).intern());   //.intern() 加入字符串厂常量池
            }
        } catch (Exception e) {
            System.out.println("**********************8 i:"+i);
            e.printStackTrace();
        }


java.lang.OutOfMemoryError: Direct buffer memory （本地内存不够了）

        System.out.println("配置的maxDirectMemory "+(sun.misc.VM.maxDirectMemory()/(double)1024/1024)+"mb");
        ByteBuffer allocate = ByteBuffer.allocateDirect(1024 * 1024 * 1024);


java.lang.OutOfMemoryError: Metaspace

            static class OOMTest { }

            int i = 0;
            try {
                while (true){
                    //一直创建类 通过cligb
                    i++;
                    Enhancer enhancer = new Enhancer();
                    enhancer.setSuperclass(OOMTest.class);
                    enhancer.setUseCache(false);
                    enhancer.setCallback(new MethodInterceptor() {

                        @Override
                        public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
                            return methodProxy.invokeSuper(o,args);
                        }
                    });
                    enhancer.create();
                }
            }
            catch (Throwable e){
                System.out.println(i);
                e.printStackTrace();
            }

















































