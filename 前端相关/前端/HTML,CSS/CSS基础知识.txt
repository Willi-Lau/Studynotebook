CSS表现

CSS基本语法：
          选择器 声明块 
          选择器：
                 通过选择器可以选中页面中的指定元素
                 比如p的作用就是选中页面中的所有p元素
          声明块：
                通过声明块来指定要为元素设置的样式
                声明块是由一个一个声明组成
                声明是一个名值对结构
                一个样式名对用一个样式值，名和值之间以:连接，以;结尾





使用CSS来修改元素的样式
    第一种方法：（内联样式，行内样式）
          在标签内部通过style属性来设置元素的样式
            
            格式  style="属性:值；属性:值；属性:值；"
             color 颜色  
             font-size 文字大小  30px 像素值
            <p style="color: red;font-size : 30px;">我是刘伟艺</p>
           问题：样式只对一个标签生效
    第二种方式：（内部样式表）放到<head>里
           <style>  p{ color:green;}     </style>
           对所有p标签都适用，同时设置多个标签
    第三种方法：（外部样式表） 放到一个.css文件内
            可以将css样式编写到一个外部的css文件中，
            然后通过link标签来引入外部的css文件 link 放到<head>中
            css:p{
                  color: brown;
                  font-size: 50px;


                  }
             html:<head><link rel="stylesheet" href="./sytle.css">
                  </head>


 css注释： /* 这是注释 */
 选择器：加到<head> <style>里
        元素选择器
             p{ color:green;} 


         id选择器
                 作用：根据元素的id值选择一个元素,选择的id的元素就会改变样式
                 语法 #id属性值{}
                 例子：  #apl{ color:red; }
         
         class选择器
                作用：根据元素的class值选择一个或多个元素,选择的id的元素就会改变样式
                 语法 .class属性值{}
                 例子：  .dog{ color:red; }

         通配选择器
                作用：选择此页面所有的元素
                 语法 *{}
                 例子：*{ color:red; }

          交集选择器：
                 作用：选定同时符合多个要求的元素
                  语法：选择器1选择器2选择器3{}
                例子：选择div标签class为dog的元素
                     div.dog{ color:red; }
          并集选择器：
                 作用：选定多个元素
                  语法：选择器1，选择器2，选择器3{}
                例子：选择div标签class为dog的元素
                     p,div.dog,#aa{ color:red; }
 
          父元素：
                 直接包含子元素的叫父元素
           子元素：
                  直接被父元素包含的是子元素
           祖先元素：
                  直接或间接包含后代的元素叫祖先元素
                  父元素也是祖先元素
           后代元素：
                  直接或间接被祖先元素包含的是后代元素
                  子元素也是后代元素
           兄弟元素：
                  相同父元素的元素

           <div>

             <p>
                <span> 
                       11111111
                </span>
                <span> 2222222</span>
             </p>
             <span>
                <p>    3333333 </p>
                <p>    444444 </p>
             </span>


             </div>

           子元素选择器：
                作用：改变子元素的样式（若子元素还包含子元素，那包含的所有子元素样式都改变）
                语法    父元素 > 子元素
                例子： div>p{
                        color: mediumblue;
                         }
                    1，2变化
            后代元素选择器：
                作用：选定指定元素的指定后代（指定后代同名就都选）
                语法： 祖先 后代
                例子： div p{
                        color: mediumblue;
                         }
                     1，2，3，4都变化
             兄弟元素选择器单体：
                 作用：选择 下一个
                 语法：前一个+下一个 
                 例子：p+p{
                        color: mediumblue;
                          } 
                       4变化
             兄弟元素选择器群体：
                 作用：选择 下一个之后所有（包括下一个）
                 语法：前一个~下一个 
                 例子：p~p{
                        color: mediumblue;
                          } 
                       4变化

             属性选择器：
                  title 提示
                 [属性名]      选择含有指定属性的元素
                 [属性名=属性值]     选择含有指定属性和属性值的元素
                 [属性名^=属性值]     选择指定属性值开头的元素
                 [属性名$=属性值]     选择指定属性值结尾的元素
                 [属性名*=属性值]     选择包含指定属性值的元素
               ul>li自动生成
                   <ul>
                     <li></li>
                    </ul>
        伪类：（不存在的类，特殊的类）
            伪类用来描述一个元素的特殊状态
                比如：第一个子元素，被点击的元素，鼠标移入的元素。。。
              一般都是：开头  （一个冒号）
            选择ul里第一个li
                  ul>li:first_child{}

            选择所有类型元素第一个  :first-child
            选择所有类型元素最后一个 :last-child
            选中所有类型元素 第m个子元素 :nth-child(m) m写几就是选几，如果写n就是所有，
                                                         2n或even是所有偶数，
                                                         2n+1或odd是所偶奇数
            选择相同类型元素第一个   :first-of-type
            选择相同类型元素最后一个   :last-of-type 
            选择相同类型元素第m个子元素   :nth-of-type(m)
            否定伪类  :not() 符合条件的去除

            直接选择第一个： ul.dog>:first-child{
                              color: red;
                             }
                             ul.shabi>:nth-child(1){
                             color: red;
                             }
           选择不同种类的第一个ul>:nth-of-type(1){
                                         color: red;
                                      }


           超链接伪类：
                    没访问过的超链接   :link
                    访问过的超链接     :visited
           鼠标状态伪类：
                    鼠标移入状态      :hover
                    鼠标点击状态      :active              

       伪元素（表示页面中并不真实存在的元素（特殊的位置））
             伪元素用:：开头
            
               第一个字母   ::first-letter
               第一行       ::first-line
               鼠标选择则部分   ::selection
               元素开始前       ::before{content=""}   （行内元素）
               元素最后后       ::after{content=""}     （行内元素）
                 开始前添加1234                p.jb::before{ content:"1234"}

         继承：继承是发生在祖先和后代之间的
               可以将一些样式设置到祖先身上，这样所有的后代都会继承
               不是所有的样式都会继承，背景，布局等不会继承


        样式的冲突：
               当我们通过不同选择器，选中相同的元素，并且为相同的样式设置不同的值时，此时就发生了样式冲突。
               发生样式冲突，应该选择哪个样式由选择器的权重（优先级）决定
        选择器的权重:
               内联样式    1，0，0，0    （写在标签里面的样式）
               id          0，1，0，0       (.id)
               类，伪类    0，0，1，0      （.class,:）
               元素        0，0，0，1     （<p>这种）
               通配选择器  0，0，0，0    （写下的全局样式）   
               继承的样式  无优先级
        比较优先级时，需要将所有的选择器的优先级进行相加计算，最后优先级越高，越优先显示（分组选择器是）
        如果优先级计算后相同，则优先使用靠下的样式（注意：优先级计算不可以越级计算。100个id选择器权重也没有一个内联高）
    
        
        可以在某一个样式后添加 !important,则此时该样式会获得最高的优先级，比内联样式高（开发慎用）


        长度单位：
                像素（200px）：
                      屏幕实际上是由一个个小点构成的，不同屏幕像素大小是不同的，像素越小的屏幕显示效果月清晰
                      同样200px在不同的设备下显示效果不一样
                百分比（50%）：
                      可以设置将属性设置为相对父元素属性的百分比
                      设置百分比可以使子元素跟随父元素的改变而改变
                    .box1 父    .box2 子   
                    .box1{
                          width: 300px;
                          height: 300px;
                          background-color: blue;
                         }
                    .box2{
                          background-color: coral;
                          width: 50%;
                          height: 50%;
                         }

                 em
                    em是相对于元素的字体大小来计算的
                    1em = 1 font-size
                    em 会根据字体大小而改变
                 rem
                    rem 相对于根元素字体大小来计算


         颜色单位：
                 名字：
                     直接通过名字设置，red,blue等
                 
                 RGB：
                     RGB通过三种颜色的不同浓度来调配出不同的颜色
                     R red G green B blue
                     每一种颜色范围在0-255(0%-100%)之间
                     语法： rgb(红色，绿色，蓝色)



                 RGBA： 在RGB基础上加上一个透明度（a）
                         a范围（1-0） 1完全透明 0不透明


                 十六进制RGB：
                         语法： #红色绿色蓝色
                         颜色范围： 00-ff
                         颜色两两重复可以简写
                         #aabbcc -> #abc
                         注意： #aabbcd 不可以简写

                         #bfa 护眼绿色


                 HSL值 HSLA值：
、                     H 色相（0-360）
                       S 饱和度，颜色的浓度 0%-100%
                       L亮度，颜色的亮度    0%-100%
                       A 透明度 1完全透明 0不透明



          文档流：
                  网页是一个多层结构，一层落着一层
                  通过CSS可以为每一层来设计样式
                  作为用户只能看到最顶上一层
                  这些层中，最底层成为文档流，文档流是网页的基础
                  我们所创建的元素默认是在文档流中排序的
               文档流两个状态：
                  在文档流中
                  不在文档流
               文档流：
                  块元素 div
                       块元素独占一行，自上向下垂直排列
                       默认宽度是父元素全部
                       默认高度是被内容撑开
                   行内元素：span
                       行内元素不会独占一行 
                       行内元素在页面中从左向右排列，一行放不下从第二行接着拍
                       行内元素默认宽度高度是被撑开的


          盒子模型：box model
              CSS将页面中的所有元素都设置为一个矩形的盒子
              将元素设置为矩形的盒子后，对页面的布局就是将不同的盒子摆到不同的位置
              每一个盒子都有以下部分组成
                   内容区 content
                   内边距 padding
                   边框   border
                   外边距 margin


                   内容区： content
                            元素中所有的子元素和文本内容都在内容去中排列
                            内容区的大小由 width,height两个属性设置
                                    width 内容区宽度
                                    heigth 内容区高度



                    margin,border,padding两个值：上下  左右
        
                    边框： border
                             边框属于盒子边缘，边缘里面属于盒子内部，出了边框就是盒子外部，
                             边框的大小会影响整个盒子的大小
                             设置边框，至少需要设置三个样式：
                                  边框的宽度   border-width
                                  边框的颜色   border-color
                                  边框的样式   border-style    solid 实线
                                                               dotted 点状虚线 
                                                               dashed 虚线
                                                               double 双线  
                 

                            边框简写属性：
                                        通过该属性可以同时设置边框所有的相关样式，并且没有顺序要求
                                        border:solid 10px red

                                        除了border以外还有四个border-XXX(设置一个边)
                                        border-top
                                        border-right
                                        border-bottom
                                        border-left
                    内边距：padding
                           内边距是content(内容)到边框（border）之间的距离
                            

                           内边距简写：
                                       写法如同border，之可以指定宽度，颜色等不可以指定
                                        padding 10px
                                        padding也有四个方向
                                        padding-top
                                        padding-right
                                        padding-bottom
                                        padding-left
                                        

                   外边距：margin
                           外边距影响和其他盒子的位置，不会影响盒子可见边距的大小


                              margin: 100px
                              设置正值会同向移动，设置负值会反向移动
                                        margin也有四个方向
                                        margin-top
                                        margin-right
                                        margin-bottom
                                        margin-left

                              margin简写属性：可以同时设置4个方相的外边距
                              让一个模块向上移动就用margin-top 赋一个负值



                一个元素在其父元素中，水平布局必须要满足以下等式：
                   margin-left + border-left + padding-left + width + padding-right + border-right + margin-right = 父元素内容的宽度（必须满足）
                以下等式必须满足，如果相加结果不成立，则成为过度约束，则会自动调整
                    调整情况：
                         一般的值默认值都是0（margin-left 是auto）
                         如果这几个值没有auto(自动调整)的情况，则浏览器会自动调整margin-right的值以使等式满足
                         如果某个值设置为auto，则自动调整auto，使等式成立
                         我们通常利用这一特点来使一个元素在其父元素中水平居中
                         实例：  width:100px
                                 margin: 0 auto;  上下0 左右自适应

                子元素在父元素的内容中排列的，
                          如果子元素的大小超过了父元素的大小，则子元素会从父元素中溢出
                          使用overflow 属性来设置父元素处理溢出的子元素
                        overflow可选值：
                              visiable 默认值，子元素会从父元素中溢出
                              hidden 溢出内容会被裁剪不会显示
                              scroll 生成两个滚动条，通过滚动条来查看完整内容
                              auto   根据需要生成滚动条

               
                 外边距的折叠：兄弟元素相邻垂直外边距会取两者之间的较大值（两者都是正值）
                               一正一副 取和
                               都是负值 取绝对值大的
                            兄弟元素间的外边距重叠对于开发是有利的，我们不需要进行处理
                 父子元素：  父子元素之间相邻的外边距，子元素会传递给父元素


              行内元素的盒子模型
                     行内元素不支持设置宽度和高度
                     行内元素可以设置padding,border,margin，垂直方向不会影响布局
              display(设置元素显示类型)
                     可选值：inline  将元素设置为行内元素
                             block   将元素设置为块元素
                             inline-block 将元素设置为行内块元素（既可以设置宽高又不会独占一行）
、                           table   将元素设置为一个表格
                             none    元素不在页面中显示（不占据页面的位置）
              visibility(设置元素显示状态)
                      可选值：hidden 元素在页面中隐藏 不显示，但占据页面的位置    

              去除样式： http://meyerweb.com/eric/tools/css/reset/

              行高：line-height（文字再父元素中居中）


              盒子大小：（box-sizing）
                    默认情况，盒子大小由内容区，内边距，边框共同决定
                    box-sizing 设置盒子大小计算方式
                        content-box 默认值，宽度高度设置内容区大小
                        border-box  设置整个可见区大小（包括内容区，内边距，边框）

              盒子阴影效果：（box-shadow）
                    第一个值:水平偏移量
                    第二个值：垂直偏移量
                    第三个值：阴影的模糊半径
                    第四个值：阴影的颜色
                     box-shadow: 20px 20px 10px yellow;

               盒子的轮廓线（多在鼠标移入时设置，不会改变盒子大小，不会改变盒子以及下面的元素布局）
                    outline:10px red solid;   属性设置和border一样



               设置圆角：( border-radius)
                    border-radius
                    border-top-left-radius
                           top-right
                           bottom-left
                           bottom-right
                     
                    border-radius  20px  圆角半径为20px的圆
                    border-top-left-radius  20px 40px      圆角左上jiao半径为20px 40px的椭圆
                    border-radius  50%  将盒子设定为圆


               浮动（float）（设置水平布局）
                    通过浮动可以使一个元素向其父元素的左侧或右侧移动
                    使用float来设置元素浮动
                    可选值：
                           none 默认值，元素不浮动
                           left 元素向左浮动
                           right 元素向右浮动
                     注意：元素设置完浮动以后，水平布局等等式不需要再强制成立
                           元素会从文档流脱离，不再占用文档流的位置，所以文档流下面的元素
                           会自动上移
                      浮动的特点：1，浮动元素会完全脱离文档，不在占据文档流中的位置
                                  2，设置浮动元素以后会向父元素的左侧或右侧移动
                                  3，设置浮动元素不会从父元素中移出
                                  4，浮动元素向左或向右移动时，不会超过它前面的其他浮动元素
                                  5，如果浮动元素上面是一个没有浮动的元素块，则浮动元素无法上移
                                  6，浮动元素不会超过他上面的兄弟元素，最多是一样高     

                      脱离文档流的特点：
                                 *脱离文档流，不再区分块元素和行内元素了
                                  块元素：
                                     1，块元素不再独占页面的一行
                                     2，脱离文档流，块元素的宽度和高度默认被撑开
                                  行内元素：
                                     行内元素脱离文档流以后会变成块元素
                                    
                       高度塌陷的问题：
                                   在浮动布局中，父元素的高度是默认被子元素撑开的
                                   当子元素浮动后，会完全脱离文档流，子元素会从文档流中脱离
                                   将会无法撑起父元素的高度，导致父元素的高度丢失
                                   父元素的高度丢失后，会导致页面混款乱

                        BFC 块级格式化环境
                          - BFC是CSS中的一个隐藏属性，可以为一个元素开启BFC
                              开启BFC该元素会成为一个独立的布局 
                          - 开启BFC后的特点
                               1.开启BFC后元素不会被浮动元素所覆盖
                               2.开启BFC的元素子元素和父元素外边距不会重叠
                               3.开启BFC元素可以包含浮动的子元素
                          -开启BFC方法：
                                1。设置float
                                2.设置 行内块元素
                                3.设置 overflow : hidden
                                4. 使用 ::after撑起


                           clear：清除浮动元素的影响
                                  如果我们不希望某个元素因为其他元素浮动的影响改变位置，可以通过clear来清除浮动元素对当前元素的影响
                                  可选值：left 清除左侧浮动影响
                                          right 清除右侧浮动影响
                                          both 清除两侧中影响大的那侧


                   **万能防止塌陷重叠
                       .clearfix::before,
                       .clearfix::after{
                                    content :'';
                                    display :table;
                                    clear : both;
                                       }
             定位：(position)
                   - 定位是一种更加高级的布局手段
                   -通过定位可以将元素摆放到任意位置
                   -通过Position属性来实现定位
                   可选值： static 默认值，不开启定位
                            relative 开启相对定位
                            absolute 开启绝对定位
                            fixed 开启固定定位
                            sticky 开启粘滞定位
                    偏移量：
                          元素开启定位后，通过偏移量设置元素的位置
                          top
                          bottom
                          left
                           right
                     相对定位：relative
                          特点：1，元素开启相对定位后，如果不设置元素偏移量，元素的位置不会发生任何的改变
                                2，相对定位是参照元素在文档流的位置进行定位的 
                                3，相对定位会高于文档流的层级
                                4，相对定位没有脱离文档流
                                5，不改变元素性质


                      绝对定位：absolute
                           绝对定位的包含块就是离他最近的开启定位的祖先元素
                           如果没有祖先元素开启了定位则根元素就是他的包含块
                           特点：1，开启绝对定位后，如果不设置 偏移量位置不会发生变化
                                 2，开启绝对定位后，元素从文档流中脱离
                                 3，绝对定位会改变元素的性质，行内变成块，块的宽高被 撑开
                                 4，绝对定位会使元素提升一个层级
                                 5，绝对元素定位是根据包含块定位的


                      固定定位：fixed
                           固定定位是一种特殊的绝对定位，固定定位大部分特点和绝对定位一样
                           唯一不同的是固定定位永远的参照于浏览器的视口进行定位

                      黏志定位：sticky
                            特点和相对定位比较相似

                      设置层级：z-index
                            设置整数，越大越优先显示
                            祖先元素层级再高也盖不住后代元素





               背景图片：background-repeat（优先级大于背景颜色）
                         值 repear 水平垂直两个方向平铺
                            no-repeat 背景图像不平铺
                            repeat-x 只沿x轴平铺
                            repeat-y 只沿y轴平铺

                         背景图片的定位：
                            background-position:
                                  值： 20px 20px 像素定位
                                       center left 关键字定位（left right bottom top center）
                                

                          背景图片的固定
                             backgruond-attachment 
                                   值： fixed 固定在屏幕上
                           背景图片的大小：
                             backgroung-size  设置同图片设置

                           背景设置属性复合方法
                             background: 所有属性值 （顺序可打乱）
                             举例：background: url(12.pngh) no-repeat 20px 20px;


                           设置透明： opacity 0-1（设置整体盒子模型）

                          

                网页过度：
                        综合复合设置：(必须按照固定顺序)
                         transition:property duration timing-function delay
                        
                 
                        transition-property   选择过度对象（none 或 all 或某个css特定属性）
                        transition-duration   设置过渡持续时间  （10s,5s ）
                        transition-timing-function 设置过度速度
                                值： linear     相同速度
                                     ease       慢快慢
                                     ease-in    慢快
                                     ease-out   慢速结束
                                     ease-in-out  慢速开始结束   
                                     cubic-bezier(n,n,n,n) 自定义 n 0-1

                         transition-delay   选择过度开始时间 (延迟)  ( s 或 ms )



















































