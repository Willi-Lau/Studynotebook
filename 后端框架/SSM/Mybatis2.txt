@Results用法总结

版权
  MyBatis中使用@Results注解来映射查询结果集到实体类属性。

（1）@Results的基本用法。当数据库字段名与实体类对应的属性名不一致时，可以使用@Results映射来将其对应起来。column为数据库字段名，porperty为实体类属性名，jdbcType为数据库字段数据类型，id为是否为主键。

        @Select({"select id, name, class_id from my_student"})
        @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="name", property="name", jdbcType=JdbcType.VARCHAR),
            @Result(column="class_id", property="classId", jdbcType=JdbcType.INTEGER)
        })
        List<Student> selectAll();
        如上所示的数据库字段名class_id与实体类属性名classId，就通过这种方式建立了映射关系。名字相同的可以省略。

（2）@ResultMap的用法。当这段@Results代码需要在多个方法用到时，为了提高代码复用性，我们可以为这个@Results注解设置id，然后使用@ResultMap注解来复用这段代码。

        @Select({"select id, name, class_id from my_student"})
        @Results(id="studentMap", value={
            @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="class_id", property="classId", jdbcType=JdbcType.INTEGER)
        })
        List<Student> selectAll();
        
        @Select({"select id, name, class_id from my_student where id = #{id}"})
        @ResultMap(value="studentMap")
        Student selectById(integer id);



（3）@One的用法。当我们需要通过查询到的一个字段值作为参数，去执行另外一个方法来查询关联的内容，而且两者是一对一关系时，可以使用@One注解来便捷的实现。比如当我们需要查询学生信息以及其所属班级信息时，需要以查询到的class_id为参数，来执行ClassesMapper中的selectById方法，从而获得学生所属的班级信息。可以使用如下代码。

        @Select({"select id, name, class_id from my_student"})
        @Results(id="studentMap", value={
            @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="class_id", property="myClass", javaType=MyClass.class,
                one=@One(select="com.example.demo.mapper.MyClassMapper.selectById"))
        })
        List<Student> selectAllAndClassMsg();



（4）@Many的用法。与@One类似，只不过如果使用@One查询到的结果是多行，会抛出TooManyResultException异常，这种时候应该使用的是@Many注解，实现一对多的查询。比如在需要查询学生信息和每次考试的成绩信息时。

        @Select({"select id, name, class_id from my_student"})
        @Results(id="studentMap", value={
            @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="class_id", property="classId", jdbcType=JdbcType.INTEGER),
            @Result(column="id", property="gradeList", javaType=List.class,
                many=@Many(select="com.example.demo.mapper.GradeMapper.selectByStudentId"))
        })
        List<Student> selectAllAndGrade();



（5）传递多个参数。首先我们给这张表增加age（年龄）和gender（性别）两个参数。当我们需要根据age和gender查询学生的午餐，这时需要改写column属性的格式。等号左侧的age和gender对应java接口的参数，右侧的对应数据库字段名。即将查到的my_student表中age和gender字段的值，分别赋给getLunchByAgeAndGender方法中的age和gender参数，去查询对应的name（午餐名）。

        @Select("select id, name, age, gender from my_student")
        @Results({
            @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="class_id", property="classId", jdbcType=JdbcType.INTEGER),
            @Result(column="{age=age,gender=gender}", property="lunch", 
                one=@One(select="com.example.demo.mapper.StudentMapper.getLunchByAgeAndGender")),
            })
        List<Student> selectAllAndLunch();
        
        @Select("select name from lunch where student_age = #{age} and student_gender = #{gender}")
        String getLunchByAgeAndGender(@Param("age") int age, @Param("gender") int gender);
 

 Mybatis 执行过程：

    https://blog.csdn.net/qq_38270106/article/details/93398694

    1、在Mybatis运行开始时，首先通过Resource类中的getResourceAsStream（resource）方法加载核心配置文件，通过该方法
    ，首先会跳到SqlSessionFactoryBuilder类中的build(InputStream is)方法。在该方法中调用了该类中另一个build（Input
    Stream inputStream, String environment, Properties properties)方法，在该方法中创建了一个XMLConfigBuilder对象
    ，通过这个对象调用自身的parse（）方法对配置文件进行解析。在该parse（）方法中调用了parseConfiguration(XNode root)
    方法，这个方法会对MyBatis.xml全局配置文件中的信息与SQL映射文件中的信息进行解析，并把对应的信息保存在Configuratio
    n对象中。然后，通过XMLConfigBuilder类中的parse()方法返回，作为参数传递到SqlSessionFactory类中的build（Configur
    ation config）方法。最后接着返回一个DefaultSqlSessionFactory对象。到这里，SqlSessionFactory对象就创建完成 了。

    2、通过是factory.openSession()方法，即DefaultSqlSessionFactory类中的openSession()方法。在这个方法中调用了另一
    个方法openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit)
    ，在这个方法中通过TransactionFactory（事务工厂）接口创建Transaction（事务对象）接口对象， 并且 ，还需要创建核心
    执行器Executor接口对象 （通过configuration.newExcutor(tx, execTypr)创建Executor对象）。Executor对象创建完成后
    ，接着执行openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCom
    mit)方法，接着向上一步返回，SqlSession对象创建完成。



传入Map类型：（使用方法和传入对象一样）
    mybatis更新sql语句：

        <update id="publishT00_notice" parameterType="Map">
        update test  
        set createdate = #{createdate},
        creator = #{creator}
        where id in 
        <foreach collection="ids" item="ids" separator="," open="(" close=")">
        #{ids}
        </foreach>
        </update>

    传入map参数类型：

        HashMap<String,Object> map = new HashMap<String, Object>();
        map.put("creator", "creator");
        map.put("createdate", "createdate");
        
        String[] ids = {"1","2"};



@Param 用法：https://blog.csdn.net/sinat_33010325/article/details/84261662
    1.关于@Param
        @Param是MyBatis所提供的(org.apache.ibatis.annotations.Param)，作为Dao层的注解，作用是用于传递参数，从而可以与SQL中的
        的字段名相对应，一般在2=<参数数<=5时使用最佳。

    2.原始的方法
        当只有一个参数时，没什么好说的，传进去一个值也只有一个参数可以匹配。当存在多个参数时，传进去的值就区分不开了，这时可以考虑用Map，例如接口
        public List<Role> findRoleByMap(Map<String, Object> parameter);
        xml文件 ---------------（1）

            <select id="findRoleByMap" parameterType="map" resultType="role">
                SELECT id,name FROM t_role
                WHERE roleName=#{roleName}
                AND note=#{note}
            <select>
        测试文件
            RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);
            Map<String, Object> parameter = new HashMap<>();
            parameter.put("roleName", "剑士");
            parameter.put("note", "决战紫禁之巅");
            List<Role> roles = roleMapper.findRolesByMap(parameter);
        
    3.使用@Param
        很明显上面的缺点就在于可读性差，每次必须阅读他的键，才能明白其中的作用，并且不能限定其传递的数据类型，下面是使用@Param的情况，需要将接口改为
        public List<Role> findRoleByAnnotation(@Param("roleName") String roleName, @Param("note") String note);
        这样我们就可以直接传入对应的值了。
        当然也可以使用Java Bean来传递多个参数，定义一个POJO
            public class RoleParam {
                private String roleName;
                private String note;
                /*getter和setter*/
            }

        此时接口就变为
            public List<Role> findRoleByBean(RoleParam role);
            这样对应的xml文件与1处的区别就在于id和parameterType发生了变化，id对应的方法和parameterType对应该类的权限定名。

        而使用更多的场景可能是这样的，对应多个POJO
            public List<Role> findRoleByMix(@Param("roleP") RoleParam role, @Param("permissionP") PermissionParam permission);

        这样就可以进行如下映射
            <select id="findRoleByMix" resultType="role">
                SELECT id,name FROM t_role
                WHERE roleName=#{roleP.roleName}
                AND note=#{rolep.note}
                AND level=#{permissionP.level}
            <select>
        注意此时并不需要写出parameterType属性，Mybatis会进行自动搜索。

    4.后记
        最后也许会有小火办会问，那@Param和@RequestParam是什么关系呢？其实它们没有关系，就跟Java和JavaScript，雷锋和雷锋塔一样，
        拥有相似的外表，其实作用是不一样的，@Param是地处Dao层，是为了传递多个参数，解决的是可读性和直观性；而@RequestParam是位
        列Controller层，作用是为获取前端参数，解决的是前后端参数不一致的问题。所以它们没有关系！























































