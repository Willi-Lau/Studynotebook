JUnit - 基本用法


https://www.w3cschool.cn/junit/2wjx1hvc.html

什么是 JUnit？
    JUnit 是一个 Java 编程语言的单元测试框架。JUnit 在测试驱动的开发方面有很重要的发展，是起源于 JUnit 的一个统称为 xUnit 的单元测试框架之一。
    JUnit 促进了“先测试后编码”的理念，强调建立测试数据的一段代码，可以先测试，然后再应用。这个方法就好比“测试一点，编码一点，测试一点，编码一点……”，增加了程序员的产量和程序的稳定性，可以减少程序员的压力和花费在排错上的时间。

特点：
    JUnit 是一个开放的资源框架，用于编写和运行测试。
    提供注释来识别测试方法。
    提供断言来测试预期结果。
    提供测试运行来运行测试。
    JUnit 测试允许你编写代码更快，并能提高质量。
    JUnit 优雅简洁。没那么复杂，花费时间较少。
    JUnit 测试可以自动运行并且检查自身结果并提供即时反馈。所以也没有必要人工梳理测试结果的报告。
    JUnit 测试可以被组织为测试套件，包含测试用例，甚至其他的测试套件。
    JUnit 在一个条中显示进度。如果运行良好则是绿色；如果运行失败，则变成红色。

什么是一个单元测试用例?
    单元测试用例是一部分代码，可以确保另一端代码（方法）按预期工作。为了迅速达到预期的结果，就需要测试框架。JUnit 是 java 编程语言理想的单元测试框架。
    一个正式的编写好的单元测试用例的特点是：已知输入和预期输出，即在测试执行前就已知。已知输入需要测试的先决条件，预期输出需要测试后置条件。
    每一项需求至少需要两个单元测试用例：一个正检验，一个负检验。如果一个需求有子需求，每一个子需求必须至少有正检验和负检验两个测试用例。


JUnit的一些注意事项：
    测试方法必须使用 @Test 修饰
    测试方法必须使用 public void 进行修饰，不能带参数
    一般使用单元测试会新建一个 test 目录存放测试代码，在生产部署的时候只需要将 test 目录下代码删除即可
    测试代码的包应该和被测试代码包结构保持一致
    测试单元中的每个方法必须可以独立测试，方法间不能有任何依赖
    测试类一般使用 Test 作为类名的后缀
    测试方法使一般用 test 作为方法名的前缀

测试失败说明：
    Failure：一般是由于测试结果和预期结果不一致引发的，表示测试的这个点发现了问题
    error：是由代码异常引起的，它可以产生于测试代码本身的错误，也可以是被测试代码中隐藏的 bug

一些常用注解：
    @Test:将一个普通方法修饰成一个测试方法 @Test(excepted=xx.class): xx.class 表示异常类，表示测试的方法抛出此异常时，认为是正常的测试通过的 @Test(timeout = 毫秒数) :测试方法执行时间是否符合预期
    @BeforeClass： 会在所有的方法执行前被执行，static 方法 （全局只会执行一次，而且是第一个运行）
    @AfterClass：会在所有的方法执行之后进行执行，static 方法 （全局只会执行一次，而且是最后一个运行）
    @Before：会在每一个测试方法被运行前执行一次
    @After：会在每一个测试方法运行后被执行一次
    @Ignore：所修饰的测试方法会被测试运行器忽略
    @RunWith：可以更改测试运行器 org.junit.runner.Runner
    Parameters：参数化注解

例子：
        @Test
        public void test_scope(){
            System.out.println("这是一个junit 测试方法");
        }    