Docker 是一个开源的应用容器引擎。，基于Go语言并遵Apache2.0协议开源
Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级，可移植的容器中。然后发布到任何的Linux机器上，也可以实现虚拟化。
容器是完全使用沙箱机制，相互之间不会有任何接口，更重要的是容器性能开销极低

雷神笔记
https://www.yuque.com/leifengyang/oncloud/mbvigg
asd1
Docker支持将软件编译成一个镜像。然后再镜像中对对各种软件做好配置。然后将镜像发布出去。其他使用者可以直接使用这个镜像。运行中
这个镜像成为容器，容器操作是非常快速的。类似Windows里的Ghost操作系统，安装好后什么都有了。


Docker镜像就是一个只读的模板，镜像可以用来创建Docker容器，一个镜像可以创建很多的容器，可以看作一个简易版的Linux

    Docker 类比Java

    Student t1 =  new Student()
    Student t2 =  new Student()
    Student t3 =  new Student()


    这里 t1 t2 t3 可以看成一个个不同的容器   Student类就是Docker的模板
    启动： systemctl enable docker --now

    常用命令：
        镜像
            docker version 查看docker版本
            docker info   查看docker具体信息 比docker version全
            docker --help 查看docker帮助  可以显示所有的命令

            docker images 查看所有本地镜像

                docker images -a  列出本地所有镜像 含中间映像层
                docker images -q  列出本地所有镜像id
                docker images -qa  列出本地所有镜像id 含中间映像层
                docker images --digests   显示镜像的摘要信息
                docker iamges --no-trunc 无截取显示信息
            
            docker search 名字  去docker hub 上查找指定的信息   e.g.  docker search tomcat
            docker pull 名字   在镜像拉去指定的信息         e.g. docker pull tomcat   没指定版本号默认拉取最新的
            docker rmi 名字     删除指定镜像                e.g.  docker rmi tomcat   没指定版本号默认删除最新的
            docker rmi -f 名字1 名字2 删除多个镜像     e.g. docker rmi -f tomcat nginx 
            docker rmi -f $(docker images -qa)   删除所有镜像
        
        容器器：
            docker ps 查看所有运行的容器
            docker ps -l 查看上一个运行的容器
            docker ps -n 2 查看上两个容器
        *   docker run -it  --指定别名(可省略)  镜像名字/镜像id     运行指定镜像。为镜像配置指定别名吗，指定别名可以省略 （交互式）
        *   docker run -it -d  镜像名字/镜像id     运行指定镜像。为镜像配置指定别名吗，指定别名可以省略 （后台式 docker ps 查不到）
        *   docker run --name=别名 -d --restart=always -p 88:80     后台运行，开机自启，设置别名 ,外部主机端口：映射端口,linux主机88端口映射到docker80端口，外部通过linux 88端口访问docker 80资源 

        *   docker run  --name=别名 -d --restart=always 镜像名字   后台运行，开机自启，设置别名 
        *   docker update id/别名 --restart=always 更改为开机重启
        *   docker stop id/name 停止

        *   docker start ContainerID     根据镜像id重新启动容器(必须是关闭的容器)   e.g. docker start 71c9f4bc61e0   //注意不是镜像名字 tomcat什么的
            docker restart ContainerID   重新进入容器 根据镜像id （关闭的容器）
            docker stop ContainerID/name   根据镜像id或别名 停止容器   温柔停止
            docker kill ContainerID/name    暴力停止

            docker rm ContainerID    删除已经停止的容器
        *   docker rm -f ContainerID  强制删除没停止的容器
            docker rm -f $(docker ps -a -q)  删除所有的容

            docker top ContainerID 查看此容器进程信息
            docker attach ContainerID 重新进入已经退出的还没关闭容器
            docker cp ContainerID;容器内路径 目标路径  拷贝文案


        docker 提交到docker hub
        username: liuweiyi
        password: 12315qwert

        1.登录 docker login   / 登出 docker logout
        2. 在docker hub上新建仓库 名字要和提交的一致 
           点击 repositories -> create repository ->只填写name : newname (这里不用加版本)
        3.
           #  docker iamges 查看镜像 选择旧镜像

            # 把旧镜像的名字，改成仓库要求的新版名字
            docker tag oldname liuweiyi/newname:v1.0   v1.0是版本号，什么都行


            # 推送
            docker push  liuweiyi/newname:v1.0   ---》 必须加:版本


            # 别的机器下载
            docker pull  liuweiyi/newname:v1.0













