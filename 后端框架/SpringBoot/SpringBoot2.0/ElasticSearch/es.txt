

位置：
    D:\elasticsearch-7.14.1-windows-x86_64\elasticsearch-7.14.1\bin

begin:
    cd  D:\elasticsearch-7.14.1-windows-x86_64\elasticsearch-7.14.1\bin
    点击：elasticSearch.bat

端口：
    9200 浏览器测试端口 输入 localhost:9200

    put p                                                                


    获取所有的 kv  --- GET

        http://127.0.0.1:9200/_cat/indices?v


    添加 
        属性/文档 ---  POST请求  / _doc / _create
        1.
            http://127.0.0.1:9200/索引名字/_doc/自定义索引号     --> _doc 后面这个自定义索引号是es唯一标志，如果没写就自动生成一个
            此时还需要添加一个json 属性串，不然会报错

            {
                "name" : "liuweiyi",
                "age" : "22" 
            }
        2.
            http://127.0.0.1:9200/索引名字/_create/自定义索引号     --> _doc 后面这个自定义索引号是es唯一标志，如果没写就自动生成一个
            此时还需要添加一个json 属性串，不然会报错

            {
                "name" : "liuweiyi",
                "age" : "22" 
            }

    查询
        1.  _doc  ---- GET请求   主键查询
             http://127.0.0.1:9200/索引名字/_doc/自定义索引号   --> _doc 后面这个自定义索引号是es唯一标志

        2.  _seaech --- GET   全部查询
            http://127.0.0.1:9200/shopping/_search  获取此索引全部结果（可能有多个）


    更新/覆盖
        1. _doc  ----PUT 主键覆盖 (全量修改，旧的所有都删除 使用新的)
             http://127.0.0.1:9200/索引名字/_doc/自定义索引号  

             {
                "name" : "liuweiyi",
                "age" : "23"    ---》 22改23
            }

            注意：这种更改也可以更改key ， k,v都可以更改
            e.g.
            {
                "name1" : "liuweiyi",
                "age1" : "23"    ---》 22改23
            }

        2. _update  -----POST 局部修改
             http://127.0.0.1:9200/索引名字/_update/自定义索引号  
            {
                "doc": {
                    "name": "张三"   --》 要修改的信息，剩下的信息不变
                }
            }

    删除
        1. _doc   -----DELETE
             http://127.0.0.1:9200/索引名字/_update/自定义索引号  





进阶查询：
    条件查询： 
        match_phrase   --> 精确匹配
        match  ---》 模糊匹配
         ---GET
         1. uri传参
            http://127.0.0.1:9200/索引名字/_search?q=key:"value"   查询包含指定 key value 的索引 

         2.JSON 传参
             http://127.0.0.1:9200/索引名字/_search
             {
                 "query"；{    -->代表查询
                     "match":{    --> 代表精确查找
                         "key":"value"    --> 具体的值 这里查询会模糊匹配 
                     }
                 },
                 "from" : 0 ,   --> 类似分页 从哪个位置始查   计算公式： （页数 - 1） * pageSize
                 "size" : 2 ,     --> 类似分页 每一页有多少数据
                 "_source" : [ "key1" ]  ， --> 筛选字段，摘选想要的，只显示key1
                 "sort" : {   ---> 排序
                     "key" :{    -----> 排序的字段
                         "order" ："asc / desc"    -----> 升序还是降序 
                     }
                 }
             }
               
                e.g.
                    增加index --- student
                        {
                            "name" : " 张三",
                            "school" : "北京大学"
                        }
                        {
                            "name" : " 李四",
                            "school" : "清华大学"
                        }

                    查询
                        http://127.0.0.1:9200:student/_search
                        {
                            query:{
                                match:{
                                    school : 北京大学
                                }
                            }
                            ,
                            _seaech : ["school"]
                        }
                    返回结果：
                        北京大学 清华大学 

                    为什么这里我只想查询北京大学，却返回北京大学和清华大学，因为这里查询类似模糊查询，会分别匹配 “北京大学” 里的所有信息
                    即匹配 “北京” 和 “大学” ，然后清华大学里也包含大学这两个文字，所以也罢清华查了出来，如果只想查出来北大，就可以
                     http://127.0.0.1:9200:student/_search
                        {
                            query:{
                                match_phrase:{
                                    school : 北京大学
                                }
                            }
                            ,
                            _search : ["school"]
                        }
             3.多条件查询
                {
                    "query"；{
                        "bool" :{   -->条件查询
                            "must/should" :[    --> 必要条件 必须成立 and / 有一个成立就可以 or
                                {
                                    "match":{
                                        "school" : "清华大学"    --》 条件1
                                    }
                                },
                                {
                                    "match":{
                                        "name" : "张三"          --》 条件2
                                    }
                                }

                            ],
                            "filter" :{
                                "range" :{
                                    "字段名":{
                                        "gt" : 5000  ---> 过滤 某字段值大于5000的  gt  大于
                                    }
                                }
                            }
                        }
                    }
                }
            
             4.聚合操作：
                {
                    "aggs":{  //聚合操作
                        "myGroupByPrice":{  //分组的结果的名字
                            "terms":{  //分组
                                "field" : "price"  //对那个字段分组 这里是对price
                            }
                        }
                    }
                }
               
        





















