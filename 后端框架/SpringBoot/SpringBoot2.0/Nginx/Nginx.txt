Nginx
    主要功能：反向代理，负载均衡，动静分离

    基本概念：
            Nginx是一个高性能的HTTP和反向代理服务器，特点是占有内存少，并发能力强。Nginx专为性能优化而开发，性能是其最重要的考量，
            Nginx能承受住高达50000个并发连接的连接数

            正向代理：
                    浏览器配置代理服务器访问目标节点
                    e.g. 访问PORNHUB上不去，使用代理服务器vpn 就行了（隐藏客户端）

            反向代理：
                    服务器为自己配置一个代理服务器来隐藏真实服务器的地址，而对外看反向代理服务器和真实服务器是一体的
                    e.g. baidu alibaba （隐藏服务器）

            负载均衡：
                    负载（工作任务）进行平衡、分摊到多个操作单元上进行运行，例如FTP服务器、Web服务器、企业核心应用服务器和其它主要任务
                    服务器等，从而协同完成工作任务。
            动静分离：
                    把动态网页，静态网页交给不同的服务器来解析

        Linux 启动 ：
                        cd /usr/local/nginx/sbin/
        
        Nginx常用命令：
                        1.操作Nginx 前提条件，进入到Nginx目录中

                           cd /usr/local/nginx/sbin/
                        
                        2.查看nginx 版本号
                                ./nginx -v

                        3.启动nginx
                                 ./nginx 
                                 启动指定配置文件的Nginx
                                ./nginx -c /usr/local/nginx/conf/nginx.conf

                        4.关闭nginx

                                ./nginx -s stop
                        
                        5.重新加载nginx
                                ./nginx -s reload
        Nginx 配置文件：
                        位置：/usr/local/nginx/conf/nginx.conf

                        三部分：
                                1.全局块：
                                        worker_processes 1;
                                        这里是设置Nginx并发处理的配置，数量越大可支持的并发处理越多
                                2.event块：
                                        网络连接部分 配置最大连接数
                                3.http块：
                                        包括http全局块 server块

                                        http全局块：
                                                全局引入，日志时间等
        实现反向代理：  
                        进入 /conf/nginx.conf
                        vim nginx.conf
                        找到server部分进行配置


                        server{
                                listen 9001;               //监听的端口号
                                server_name 192.168.40.129;   //监听的URl主地址

                                location ~/lwy01/                  //这里 ~/lwy/ 为正则表达式 表示里面有/lwy01/ 的url 如果是location / 就是所有
                                {
                                        proxy_pass http://127.0.0.1:8081     //所要跳转到的地址
                                }
                        }

                        然后重启nginx

                        输入 http://192.168.40.129:9001/lwy01/8081.html
                        跳转到 http://192.168.40.129:8081/lwy01/8081.html
        
        实现负载均衡：
                https://www.runoob.com/w3cnote/nginx-proxy-balancing.html
                
                负载均衡的配置：
                        1.进入 /conf/nginx.conf
                              vim nginx.con
                        
                        在http里配置

                                upstream myserver{
                                        server 192.168.40.129:8081;        //需要进行负载均衡的端口号
                                        server 192.168.40.129:8082;
                                }

                        在server里配置

                                location / {
                                        root   html;
                                        proxy_pass http://myserver;    //前面自定义的服务名字
                                        index  index.html index.htm;
                                }



                负载均衡的四种策略：
                        1.轮询（默认）
                                每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除
                        2.weigth
                                weigth 代表权重默认为1，权重越高被分配的用户越多
                        3.ip_hash      
                                每个请求按访问的ip的ahsh结果分配，这样每个访客固定访问一个后端服务器
                        4.fair(三方)
                                按后端服务器的响应时间来分配请求，响应时间短的优先分配
        
        Nginx高可用：
                1.两台nginx服务器
                2.需要keepalive
                3.需要虚拟ip
        
        四层负载均衡七层负载均衡：
                
                        https://www.cnblogs.com/kevingrace/p/6137881.html






























































































































































