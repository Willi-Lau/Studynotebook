https://blog.csdn.net/qq_32448349/article/details/101696892
https://www.cnblogs.com/ejiyuan/p/11014765.html

缓存  不同于数据库 读取更快 临时文件可以放在缓存中


JSR107规范：

    Java Caching 定义了5个核心接口，分别是CachingProvider,CacheManager,Cache,Entry,Expiry

    CachingProvider :定义了创建，配置，获取，管理，和控制多个CacheManager.一个应用可以再运行期间访问多个CachingProvider
    CacheManager: 定义了创建，配置，获取，管理和控制多个唯一命名的Cahce,这些Cache存在于Cache存在于CacheManager的上下文中，
                一个CacheManager仅被一个CachingProvide拥有
    Cache:是一个类似Map的数结构并临时存储以Key为索引的值，一个Cache仅被一个CacheManager所拥有，
    Entry:是一个存储在Cache中的key-value对
    Expiry:每一个存储在Cache中的条目有一个定义的有效期，一旦超过这个时间，条目为过期的状态。一旦过期，条目将不可访问，更新和删除。
            缓存有效期通过设置ExpirtyPolicy设置

    CacheManager 可以理解为数据库连接池，每一个Cache是一个连接



    缓存重要概念+注解

    Cache:缓存接口，定义缓存操作。实现有RedisCache,EhCacheCache,ConcurrentMapCache 等
    CacheManager:缓存管理器，管理各种缓存。
    @Cacheable:主要针对方法配置，能够根据方法的请求参数对其结果进行缓存
    @CacheEvict 清空缓存
    @CachePut 保证方法被调用，有希望结果被缓存
    @EnableCaching：开启基于缓存的注解
    keyGenerator 缓存数据时key生成策略
    serialize 缓存数据时value 序列化策略


Redis:
        聚合模型：
                KV对
                Bson 类似Json  文档存储
                列族
                图形

       传统数据库ACID   :A Atomicity 原子性
                        C Consistency 一致性
                        I Isolation 独立性
                        D Durability 持久性

       NoSQL数据库  CAP:  C Consistency 强一致性  
                          A Availability 可用性
                          P Paration tolerance 分区容错性   （重要）


                        CAP只能三选二 三个特点不可能都满足，一个分布式系统不可能同时满足C,A,P这三个需求，最多只能完成两个 

                        CA : 单点集群，满足一致性，可用性得系统，通常在可扩展性不太强大   RDBMS  Oracle
                        CP:  满足一致性，分区容错性，通常性能都不好           MongoDB HBase Redis
                        AP: 满足可用性，分区容错性得系统，一致性都不好   大多数选择  数据量太大不能保证一致性  memcached









