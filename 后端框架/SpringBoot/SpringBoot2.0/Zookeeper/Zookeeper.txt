Zookeeper 
git config --global http.sslVerify false
    从设计模式角度来理解：
        是一个基于观察者模式设计的分布式服务管理框架，他负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据发生变化，Zookeeper就
        将负责通知已经在Zookeper上注册的哪些观察者作除相应的反应

        windows安装： https://www.jianshu.com/p/f7037105db46
        安装错误，出现 Zookeeper anduit is disable https://blog.csdn.net/qq_43472877/article/details/111177298 
        启动：点击 bin\ zkServer.cmd
        linux 启动 cd /usr/local/zookeeper-3.4.2/bin   执行 ./zkServer.sh start
                                                       停止 ./zkServer.sh stop

        操作zookeeper  ./zkCli.sh
        查看 zookeeper连接： ls / 
        查看连接上的服务名称   ls /services

        zookeeper默认端口号
                代码访问client的端口号： 2181
                leader和flower通信的端口号： 2888
                选举leader时通信的端口号： 3888
                其他服务与监控中心通信端口： 7070

        Zookeeper 特点：
                1.一个领导者，多个跟随着组成的集群
                2.集群中只要有半数以上的节点存活，Zookeeper集群就能正常的工作 
                3.全局数据一致，每个Server保存一份相同的数据副本，Client无论连接到那个Server,数据都是一致的
                4.更新请求顺序进行，来自同一个Client的更新请求按照其发送的顺序依次执行
                5.数据更新原子性，一次数据更新要么成功，要么失败

        
        应用场景：
                统一命名服务，统一配置管理，统一集群管理，服务器节点动态上下线，软负载均衡等
                
                统一命名服务：在分布式环境下，经常需要对应用，服务进行统一命名，便于识别
                             例如：IP地址不容易记，而域名比较容易记  192.168.0.15 不好记 www.baidu.com 好记
                统一配置管理：1.一般要求一个集群中，所有的节点配置信息是一致的，比如kafka集群
                             2.对配置文件修改后，希望能快速同步到各个节点上
                             3.配置管理可以交给Zookeeper实现，将配置信息写在Zookeeper上的一个Znode,其他客户端服务器监听这个Znode,一旦Znode数据被修改
                               Zookeeper将通知各个客户端服务器
                统一集群管理：1.可根据节点实时状态做出一些调整
                             2.Zookeeper可以实现实时监控节点状态变化
                服务器动态上下线：
                             防止服务器暴毙客户端还访问，及时通知服务器最新状态
                软负载均衡：
                            在Zookeeper 中记录每台服务器的访问数，让访问最少的服务器去处理最新的客户端请求
        节点类型：     
                持久：客户端和服务器断开连接后，创建的节点不删除
                短暂：客户端和服务器断开连接后，创建的节点和删除
               


































































































































































































































































