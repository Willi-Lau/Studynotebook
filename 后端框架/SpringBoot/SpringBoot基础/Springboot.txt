

阿里云镜像：https://start.aliyun.com/



开始：pom.xml:
               


    springboot 核心启动类：

            它可以自动扫描自己包和子包下所有的文件，所以项目必须见在他的下面

            //springboot 启动引导类
            //扫描当前包以及子包，所以所有资源必须放在这个包下
            @SpringBootApplication
            public class Application {


                public static void main(String[] args) {
                    SpringApplication.run(Application.class,args);
                }
            }

    注解：
             @EnableTransactionManagement     写在Configuration 上，开启事务  这样就可以使用 @Transactional 进行事务管理
             @Exceptionhandler           异常处理
             @CrossOrigin                写在Controller上，允许跨域
             @RestController             @ResponseBody ＋ @Controller          
             @GetMapping                 @RequestMapping的GET请求方式      
             @ConfigurationProperties(prefix = "jdbc")    实现SpringBoot配置文件的读取和应用，
                                                          可以读取SpringBoot配置文件（默认必须是application.properties或application.yml）
                                                          prefix 代表的是设置前缀，，因为存的是jdbc.url，类里写url就可以了
             @EnableConfigurationProperties(Jdbcproperties.class)  设置引入配置项，允许这个类使用ConfigurationProperties注解
             @Data                      自动生成get/set/hashCode/equals/toString等方法，写到类上
             @Getter                    自动生成get方法，写到类上
             @Setter                    自动生成set方法，写到类上
             @MapperScan("com.lwy.springbootdemo01.mapper")     写在Springboot执行主类上，扫描mapper接口
             @PathVariable               获取传递进来的值URL形式

                                        @GetMapping("/fruit/{id}")
                                        @ResponseBody
                                        public Fruit doquertfruit(@PathVariable String id){
                                            Fruit querybyig = fruitService.querybyig(id);
                                            return querybyig;
                                        }
            @ConditionalOnMissingBean 如果Spring容器中有了此对象，这个自动配置的不会被实例化
            @SuppressWarnings("all")  忽略所有的警告
            @Value(${"name"})         注入application.yml 文件中的内容
            @EnableCaching            开启缓存
            @EnableScheduling         开启消息中定时发送功能
            @EnableJms                开启消息队列

    返回json

         <dependency>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-web</artifactId>
         </dependency>

        只要有这个依赖就会返回JSON 这里面自动包含了json的包

        手动设置返回类型：JSON例子

        @Configuration
        public class MvcConfig implements WebMvcConfigurer {

        @Override
        public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {
            configurer.ignoreAcceptHeader(true)  // 这里一定要设置为true，才能覆盖原来的默认的xml format
                    .defaultContentType(MediaType.APPLICATION_JSON);
        }
        }

    Controller

            
            @RestController               
            public class  HelloController {



                //类似RequestMapping() 返回的是get 方法
                @GetMapping("/hello")
                public String hello(){
                    return "hello spring boot";
                }
            }



    SpringBoot 采用全注解开发
    






    lombok应用：
          
          简化POJO类

          1.安装lombok插件   setting - pougins 里搜索 lombok 并安装
          2.添加依赖到pom    

            <dependency>
                    <groupId>org.projectlombok</groupId>
                    <artifactId>lombok</artifactId>
                    <version>1.18.4</version>
                    <scope>provided</scope>
                </dependency>


          3.改造实体类，使用注解代替get/set，写道类名上

          
                @Data   //自动生成get/set等方法
                public class Jdbcproperties {


                    private String url;

                    private String driverClassName;

                    private String username;

                    private String password;


                }



                @Data  包含get/set/hashCode/equals/toString等方法，写到类上
                @Getter   get方法，写到类上
                @Setter   set方法，写到类上

    整合SpringMVC

            修改tomcat端口(application.properties里)
            
            #设置端口号
                server.port=8080

            访问静态资源
            
            可以放置在： /META-INF/resources/
                        classpath:/resources/
                        classpath:/static/
                        classpath:/public/
            整合拦截器

                1.编写拦截器 实现HandleInterceptor
                2.编写实现类 WebMvcConfigurer,注册拦截器，添加拦截器




                实现类：
                    //实现 WebMvcConfigurer 来完成对 拦截器的添加
                    // 重写addInterceptors的方法来添加自定义拦截器
                    @Configuration
                    public class MvcConfig implements WebMvcConfigurer {

                        //注册拦截器 实现拦截器类，返回一个实例化的拦截器
                        @Bean
                        public Myinterceptor myinterceptor(){
                            return new Myinterceptor();
                        }

                        //添加拦截器到拦截器链
                        @Override
                        public void addInterceptors(InterceptorRegistry registry) {
                            //   addInterceptor   所添加的拦截器
                            //  addPathPatterns    拦截哪些东西的配置   /* 是拦截所有请求路径
                            registry.addInterceptor(myinterceptor()).addPathPatterns("/*");
                        }
                    }


    整合事务和连接池


        事务配置

                 https://blog.csdn.net/nextyu/article/details/78669997


        数据库连接池配置

            不再需要手动引入jdbc相关属性，只需要在application.properties里配置即可
            spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver    //mysql5 为com.mysql.jdbc.Driver
            spring.datasource.url=jdbc:mysql//127.0.0.1:3306/fruit
            spring.datasource.username=root
            spring.datasource.password=root


    整合Mybatis

        添加启动器依赖，设置内容，配置@MapperScan









application.properties

    # 应用名称
    spring.application.name=demo

    #设置端口号
    server.port=8080

    #Spring 部分
    #前缀
    #spring.mvc.view.prefix=/WEB-INF/

    #后缀
    #spring.mvc.view.suffix=

    #设置连接池 spring 自带 Hikari 不需要其他配置
    spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
    spring.datasource.url=jdbc:mysql://127.0.0.1:3306/jqueryhomework?serverTimezone=UTC&useUnicode=true&characterEncoding=utf8&useSSL=false
    spring.datasource.username=root
    spring.datasource.password=root



    #mybatis 部分
    #配置实体类别名
    mybatis.type-aliases-package=com.lwy.demo.bean
    #设置mapper路径
    mybatis.mapper-locations=mapping/*.xml






分页
https://www.cnblogs.com/xifengxiaoma/p/11027551.html





































































































