https://blog.csdn.net/u011863024/article/details/114298270

SpringColud
    分布式+微服务一站式解决方案。是多种微服务架构落地技术的集合体，俗称微服务全家桶
    SpirngCloud 综合技术大全：

    总父工程-> 多个model

    总Project pom.xml
        把里面的内容替换成：
                <!--  1-->
                <packaging>pom</packaging>
                <!--  配置总工程-->
                <!--  统一进行jar包管理-->
                <properties>
                    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                    <maven.compiler.source>1.8</maven.compiler.source>
                    <maven.compiler.target>1.8</maven.compiler.target>
                    <junit.version>4.12</junit.version>
                    <log4j.version>1.2.17</log4j.version>
                    <lombok.version>1.16.18</lombok.version>
                    <mysql.version>5.1.47</mysql.version>
                    <druid.version>1.1.16</druid.version>
                    <mybatis.spring.boot.version>1.3.0</mybatis.spring.boot.version>
                </properties>
                <!--  子模板继承之后，提供作用：锁定版本 + 子model不用写groupid version-->
                <!--
                        1.dependdencyManagerment 只声名不引用 所以子项目需要引入依赖
                        2.如果不在子项目中声名依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖，并且没有具体指定的版本，才会从父项目中继承该项
                        并且version和scope都读取自父pom;
                        3.如果子项目中指定了版本号，那么会使用子项目中指定的jar版本
                        4.主要作用是如果有多个子项目都引入同一个依赖，这样可以避免在每个使用的子项目里都声名一个版本号，这样想要升级时，只需要在顶层父亲容器中更新，
                        而不是一个一个项目中修改，如果某个子项目需要使用另外一个版本，只需要声名version就可以
                -->
                <dependencyManagement>
                <dependencies>
                <!--     springboot-->
                    <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-dependencies</artifactId>
                    <version>2.2.2.RELEASE</version>
                    <type>pom</type>
                    <scope>import</scope>
                    </dependency>
                <!--     springcloud-->
                    <dependency>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-dependencies</artifactId>
                    <version>Hoxton.SR1</version>
                    <type>pom</type>
                    <scope>import</scope>
                    </dependency>
                <!--     springcloud alibaba-->
                    <dependency>
                    <groupId>com.alibaba.cloud</groupId>
                    <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                    <version>2.1.0.RELEASE</version>
                    <type>pom</type>
                    <scope>import</scope>
                    </dependency>
                <!--     mysql-->
                    <dependency>
                    <groupId>mysql</groupId>
                    <artifactId>mysql-connector-java</artifactId>
                    <version>${mysql.version}</version>
                    </dependency>
                <!--     druid-->
                    <dependency>
                    <groupId>com.alibaba</groupId>
                    <artifactId>druid</artifactId>
                    <version>${druid.version}</version>
                    </dependency>
                <!--     mybatis-spring-->
                    <dependency>
                    <groupId>org.mybatis.spring.boot</groupId>
                    <artifactId>mybatis-spring-boot-starter</artifactId>
                    <version>${mybatis.spring.boot.version}</version>
                    </dependency>

                </dependencies>
                </dependencyManagement>

                <build>
                    <plugins>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <configuration>
                        <fork>true</fork>
                        <addResources>true</addResources>
                        </configuration>
                    </plugin>
                    </plugins>
                </build>
    
    创建子model:
    pom.xml
         <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-actuator</artifactId>
            </dependency>
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>1.1.10</version>
            </dependency>
            <!--mysql-connector-java-->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
            </dependency>
            <!--jdbc-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-jdbc</artifactId>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-devtools</artifactId>
                <scope>runtime</scope>
                <optional>true</optional>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <optional>true</optional>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
            </dependency>

        </dependencies>
    


    工程重构，提取公共实例(eneity)
    新建一个工程，然后把所有实例都放在这个工程下
    其他的工程通过pom.xml引入这个工程来使用实例

    服务注册与发现
        
            什么是服务治理：
                在传统的rpc远程调用框架中，管理每个服务与服务器之间的依赖关系比较复杂，管理比较复杂，所以需要服务治理，管理服务与服务
                之间的依赖关系，可以实现服务调用，负载均衡，容错等，实现
        1.Eureka:
        2.Zookeeper:
        3.Consul：
    
    

    
   


