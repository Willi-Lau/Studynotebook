kafka

    kafka是一个分布式的机基于发布订阅模式的MQ，主要应用于大数据实时领域

    使用MQ的好处
    
        1.解耦
            允许独立的扩展或修改两边的处理过程，只要确保他们遵循同样的接口约束
        2.可恢复性
            系统的一部分组件失效时，不会影响整个系统。MQ降低了进程间的耦合度，所以即使一个处理消息的进程挂了，加入队列中的消息仍然可以
            在系统恢复后处理
        3.缓冲
            有助于控制好优化数据流经过系统的速度，解决生产消息和消费消息速度不一致的情况
        4.灵活性 峰值处理
            在访问量剧增的情况下MQ可以顶住突发的压力，不会因为访问量增加而崩溃
        5.异步通信
            就是异步通信
        


    kafka 持久化默认存磁盘 存7天 168小时

    位置 k8s-3-100g    /opt/kafka
    启动命令  先启动zk再启动kafka
            /opt/kafka/kafka/bin/zookeeper-server-start.sh /opt/kafka/kafka/config/zookeeper.properties
            /opt/kafka/kafka/bin/kafka-server-start.sh /opt/kafka/kafka/config/server.properties

    kafka 生产者工作流程
        看图
        RecordAccumulator 缓冲区

    kafka Partitioner 分区器工作策略
        1.如果指明具体哪个分区 就存入到具体的分区
        2.如果没有指明分区 指明课key 就根据key 的hashCode % 分区数 去计算所在分区
        3.如果什么都没有指定 就随机一个分区进行粘性处理（分到哪个分区就一直在哪）

    kafka 提高生产者吞吐量
        1.缓冲区大小
        2.批次大小（每次运送数据量大小） batch.size 累计达到后才会发送数据 默认16k
        3.等待时间长短 linger.ms 如果数据迟迟没有达到batch.size就会发送 默认0ms
        4.压缩

    生产者ack应答级别
        ack = 0 生产者发送的数据不需要等待落盘  不安全
        ack = 1 生产者发送的数据leader收到后应答 （没有等follower确认） 不安全 leader 主 follower 丛
        ack = -1 发送的数据 leader和所有ISR都确认了再应答
            ISR in-sync replica set 
            为了解决某一个follower宕机导致集群迟迟无法响应的问题，如果Follower迟迟没发送通信请求或同步数据给Leader,
            这个Follers会被踢出ISR 时间阈值默认为30s laeder 0 isr 012

            如果仅仅是-1也是不可靠的,如果分区数设置为1 或者ISR最小应答数设置为1也会丢失数据 和ack =1 一样 laeder 0 isr 0
            
            **可靠性保证
                1.ack = -1 
                2.分区副本 >= 2
                3.ISR应答副本 >= 2
        
    数据重复问题：
        数据重复判断的标准：具有PID,Partition,SeqNumber相同主键提交时，Broker只会持久化一条。
        PID kafka每次重启都会分配一个新的  producer id
        Partiton 分区号
        Seq Number 单调递增ID

        所以kafka幂等性只能保证在单分区内的不重复
        
    事务：
    
    数据有序性

    zookeeper中存储的kafka信息：
        /kafka/brokers/ids   [0,1,2] 记录哪些服务器
        /kafka/brokers/topic/first/partitions/0/state {"leader":1,"isr":[0,1,2]} 记录谁是leader 有哪些服务器可用
        /kafka/controller 辅助选举

    kafka副本信息：
        kafka副本作用 提高数据可靠性
        kafka默认副本数是，生产环境一般配置为两个，保证数据可靠性，太多副本会增加磁盘存储空间，增加网络数据传输，将抵效率
        副本分为leader 和 follower kafka生产者只会把数据发往leader follower自己去同步leader数据
        kafka所有分区副本成为AR 
        AR = ISR + OSR
        ISR 表示和leader保持同步的follower集合
        OSP 表示leader和follower同步时，延迟过多的副本

    kafka follower故障处理
        看图

    kafka 创建主题分区副本的命令
        创建16个分区4个副本名字为myTopic的命令
        bin/kafka-topics.sh --bootstrap-server 192.168.137.137:9092 --create --topic myTopic --partitions 16 --replication-factor 4

    kafka leader partition 平衡操作
        看图
        不要多次触发 浪费资源

    kafka 高效读写数据
        1.kafka本身是分布式集群，可以采用分区技术，并行度高
        2.度数据采用稀疏索引，可以快速定位数据
        3.顺序读写磁盘
        4.页缓存+零拷贝
            零拷贝：
                kafka的数据加工处理操作由kafka生产者和kafka消费者处理 kafka broker应用层不关心存储的数据，所以就不用走应用层，传输效率高
            pageCache
                kafka重度依赖底层OS提供的PageCache功能。当上面有写操作时，操作系统只是将数据线写入PageCache。读操作时先去PageCache中查找，如果找不到
                再去磁盘中去读取，实际上PageCache是把尽可能多的空闲空间当做了磁盘缓存来使用














































































































































