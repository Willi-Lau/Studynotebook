***************************************************************************************************************************************
正则表达式                                        
                
                                                     示例字符串：123aaaaaabccdefbc456         
符号              描述                                     实例:正则表达式                 返回结果：全局搜索
 literal          匹配文本字符串的字面值literal                  abc                         abc
 re1 |re2         匹配正则表达式re1或re2                         abc|bc                     abc
                                                                 abc|def                     abc def
.                匹配任何字符(长度为1)（除了\n）                .a                          aa aa aa
 ^                匹配字符串起始部分                             ^1.                         12 
 $                匹配字符串终止部分                             .6$                         56
 *                匹配0-多次 出现的正则表达式                    a*bc                        aaaaaabc bc
 +                匹配1-多次 出现的正则表达式                    a+bc                        aaaaaabc
 ?                匹配0或1次 出现的正则表达式                    a?bc                        abc bc
 {n}              匹配n次 *连续*出现的正则表达式                   a{4}                        aaaa
                                                                 a{3}                        aaa aaa （匹配过的字符不会再匹配）
 {m,n}            匹配最少m次且最多n次 出现的正则表达式 *最大次数优先匹配*   a{1,5}             aaaaa a
                                                                            a{1,3}            aaa aaa     
 [...]            匹配来自字符串的任意单一字符                   [a,b,c,l,p]                 a a a a a a b c c b c
 [..x-y..]        匹配x-y范围的任意单一字符
 [^..]            不匹配词字符串出现的任何一个字符，             [^abc]{2}                   12 de 45 6
                   包括某一范围字符
 (*|+|?|{})       用于匹配上面频繁出现的符号的非贪婪版本
 (..)             匹配为封闭的正则表达式，然后另存为子组

                                  
                                                            示例字符串：123aaaa aabccdefbc456  
特殊字符          描述                                              实例                 返回结果：全局搜索
 \d               匹配任何十进制数字 与[0,9]一致（\D与\d相反        \d                    1 2 3 4 5 6
                  ，不匹配任何非数值型数字）                        c\d                   c4
                   \d等价于[0-9]。0-9任意的一个数字   实例：010-888888888  \d{8}是匹配连续的8个数字   88888888        
                                                                           \d1{5} 匹配一个数字和5个1   无
                                                                           \d8{5} 匹配一个数字和5个8   888888 

 \w               匹配任何字母数字字符，与[A-Za-z0-9]相同（\W相反） \w                    1 2 3 a a a a a a b c c d e fb c 4 5 6         
                                                                    \w{3}                 123 aaa aab ccd efb c45
 \s               匹配任何空格字符，与[\n\t\r\v\f]相同（\S相反）    \sa                    a
 \b               匹配任何单词边界（\B相反）
 \N               匹配已保留的子组（参见上面的（...））
 \c               逐字匹配任何特殊字符c
 \A(\Z)           匹配字符串的起始（结束）

转义符\  接特殊符号
字符串 I don't want to be your entire world, just the best thing in it, I want to say "$%^&*@#~!"，想正确匹配"$%^&*@#~!"
\"\$\%\^\&\*\@\#\~\!\"


正则表达式分组：
 1、重复一个字符串时
 2、使用（）进行分组，使用(?<word>\w+)指定组名，其中word为组名
 3、从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。
 表达式(A)(B(C))
   0 (A)(B(C))
   1 (A)
   2 (B(C))
   3 (C)
 1、使用()对匹配的内容分组
   例如：(\d{1,3}\.){3}\d{1,3}
         如IP地址：192.168.60.14 （分析\d是数字，然后1-3个，然后转义字符.，然后3组，然后\d是数字，然后1-3个）
 2、使用\1、\2反向引用 *****引用的不是表达式而是匹配到的内容*****
   例如：He loves her lover.
         He likes her liker.
         正则表达式为：He (l..e)s her \1r.
         loves、lover、likes、liker共同的部分为l..e，..表示任意字符，\1r引用
         He (?<name>l..e)s her \k<name>r.
         给分组去一个名字，然后去引用这个名字，用\k<名字>。
结尾加？ 非贪婪模式
        Java 正则表达式和 Perl 的是最为相似的。
        java.util.regex 包主要包括以下三个类：
        Pattern 类：
               pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。
        Matcher 类：
               Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。
        PatternSyntaxException：
               PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。
        group()
              返回当前查找而获得的与组匹配的所有子串内容
        matches()
              尝试对整个目标字符展开匹配检测，也就是只有整个目标字符串完全匹配时才返回真值。
        start()
              返回当前查找所获子串的开始字符在原目标字符串中的位置
        end()
              返回当前匹配的子串的最后一个字符在原目标字符串中的索引位置 。
        find()
              尝试在目标字符串里查找下一个匹配子串。 
        split(CharSequence input)
              将目标字符串按照Pattern里所包含的正则表达式为模进行分割。
    
  1：判断输入字符是否为数字
    String line = "123456";

        String pattern = "^[0-9]*$";
        //判断输入字符是否为数字
        
        boolean m = Pattern.compile(pattern).matcher(line).matches();
        System.out.println(m);


  2:分割字符串
    Pattern pattern = Pattern.compile(expression); //正则表达式
                     String[] strs = pattern.split(str); //操作字符串 得到返回的字符串数组


  3：进行条件输出 输出所有的单词
     String line = "apple banana coco";

        String pattern = "[a-z]+";
        //进行条件输出 输出所有的单词
        Matcher m = Pattern.compile(pattern).matcher(line);
        while (m.find()) {
            System.out.println(m.group());

        }









